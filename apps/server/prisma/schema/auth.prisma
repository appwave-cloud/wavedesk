model User {
  id               String       @id
  name             String
  email            String       @unique
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  username         String?      @unique
  displayUsername  String?
  twoFactorEnabled Boolean?
  role             String?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  accounts         Account[]
  apikeys          Apikey[]
  invitations      Invitation[]
  members          Member[]
  passkeys         Passkey[]
  sessions         Session[]
  twofactors       TwoFactor[]

  createdTickets      Ticket[]           @relation("CreatedBy")
  assignedTickets     Ticket[]           @relation("AssignedTo")
  ticketComments      TicketComment[]
  ticketAttachments   TicketAttachment[]
  ticketWorklogs      TicketWorklog[]
  createdTicketTasks  TicketTask[]       @relation("CreatedBy")
  assignedTicketTasks TicketTask[]       @relation("AssignedTo")

  @@map("user")
  @@schema("auth")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  impersonatedBy       String?
  activeOrganizationId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
  @@schema("auth")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
  @@schema("auth")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
  @@schema("auth")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
  @@schema("auth")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?
  aaguid       String?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("passkey")
  @@schema("auth")
}

model Apikey {
  id                  String    @id
  name                String?
  start               String?
  prefix              String?
  key                 String
  userId              String
  refillInterval      Int?
  refillAmount        Int?
  lastRefillAt        DateTime?
  enabled             Boolean?
  rateLimitEnabled    Boolean?
  rateLimitTimeWindow Int?
  rateLimitMax        Int?
  requestCount        Int?
  remaining           Int?
  lastRequest         DateTime?
  expiresAt           DateTime?
  createdAt           DateTime
  updatedAt           DateTime
  permissions         String?
  metadata            String?
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("apikey")
  @@schema("auth")
}

model Organization {
  id        String   @id
  name      String
  slug      String?  @unique
  logo      String?
  createdAt DateTime
  metadata  String?

  polarCustomerId                 String?
  polarSubscriptionId             String?
  polarSubscriptionStatus         String?
  polarSubscriptionInterval       String?
  polarSubscriptionStart          DateTime?
  polarSubscriptionEnd            DateTime?
  polarSubscriptionCanceledAt     DateTime?
  polarSubscriptionCanceledReason String?

  invitations       Invitation[]
  members           Member[]
  teams             Team[]
  ticketCategories  TicketCategory[]
  tickets           Ticket[]
  customers         Customer[]
  ticketActivities  TicketActivity[]
  ticketComments    TicketComment[]
  ticketAttachments TicketAttachment[]
  linkedTickets     LinkedTicket[]
  ticketWorklogs    TicketWorklog[]
  ticketTasks       TicketTask[]

  @@map("organization")
  @@schema("auth")
}

model Member {
  id             String       @id
  organizationId String
  userId         String
  role           String
  createdAt      DateTime
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  teamId String?

  @@map("member")
  @@schema("auth")
}

model Invitation {
  id             String       @id
  organizationId String
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  teamId String?

  @@map("invitation")
  @@schema("auth")
}

model Team {
  id             String       @id
  name           String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt      DateTime
  updatedAt      DateTime?

  @@map("team")
  @@schema("auth")
}
